#!/usr/bin/python
# monitors-relation-changed - Process monitors.yaml into remote nagios monitors
# Copyright Canonical 2012 Canonical Ltd. All Rights Reserved
# Author: Clint Byrum <clint.byrum@canonical.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import subprocess
import yaml
import json
import re
import string

from common import customize_service, units, relations, get_pynag_host, get_pynag_service

# Note that one can pass in args positionally, 'monitors.yaml targetid
# and target-address' so the hook can be tested without being in a hook
# context.
#
if len(sys.argv) > 1:
    relation_settings = {'monitors': open(sys.argv[1]).read(),
                         'target-id': sys.argv[2]}
    if len(sys.argv) > 3:
        relation_settings['target-address'] = sys.argv[3]
else:
    relation_settings = json.loads(
            subprocess.check_output(['relation-get', '--format=json']).strip())

if relation_settings is None or relation_settings == '':
    sys.exit(0)

if ('monitors' not in relation_settings
        or 'target-id' not in relation_settings):
    sys.exit(0)

monitors = relation_settings['monitors']
target_id = relation_settings['target-id']
# If not set, we don't mess with it, as multiple services may feed
# monitors in for a particular address. Generally a primary will set this
# to its own private-address
target_address = relation_settings.get('target-address', None)
# Need this for broken processing
relation_id = os.environ.get('JUJU_RELATION_ID','testing')
# Need this for departed
owner_unit = os.environ.get('JUJU_REMOTE_UNIT','testing/0').replace('/','-')

if type(monitors) != dict:
    monitors = yaml.safe_load(monitors)

# Output nagios config
host = get_pynag_host(target_id)

if target_address is not None:
    # We only tag primaries because of https://launchpad.net/bugs/1025478
    units.tag_object(host.get_suggested_filename(), owner_unit)
    relations.tag_object(host.get_suggested_filename(), relation_id)

    host.set_attribute('address', target_address)
    host.save()

reduce_RE = re.compile('[\W_]')


for mon_family, mons in monitors['monitors']['remote'].iteritems():
    for mon_name, mon in mons.iteritems():
        service_name = '%s-%s' % (target_id, mon_name)
        service = get_pynag_service(target_id, service_name)
        if customize_service(service, mon_family, mon_name, mon):
            if target_address is not None:
                units.tag_object(service.get_suggested_filename(), owner_unit)
                relations.tag_object(service.get_suggested_filename(), relation_id)
            service.save()
        else:
            print('Ignoring %s due to unknown family %s' % (mon_name,
                                                            mon_family))

os.system('service nagios3 reload')
