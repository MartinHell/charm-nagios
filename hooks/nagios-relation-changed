#!/usr/bin/env python

import string
import sys
import os
import os.path
import yaml
import subprocess
from common import *

from Cheetah.Template import Template

def write_service_template(service, host, description, command):
        service = service.replace("__hostname__", host)
        service = service.replace("__description__", description)
        service = service.replace("__command__", command)
        return service

def write_host_template(host, hostname, ip_address):
        host = host.replace("__hostname__", hostname)
        host = host.replace("__alias__", hostname)
        host = host.replace("__address__", ip_address)
        return host


def main():
        for var in ['JUJU_REMOTE_UNIT', 'JUJU_RELATION_ID']:
            if var not in os.environ:
                print "%s must be set" % (var)
                return 1
        relation_id = os.environ["JUJU_RELATION_ID"]
        relation_name = os.path.basename(sys.argv[0]).split('-')[0]
        remote_unit = os.environ["JUJU_REMOTE_UNIT"]

        service_name, _ = remote_unit.split("/")
        (ip_address, hostname) = get_ip_and_hostname(remote_unit)

        nagios_service = ""
        host_template = """
        define host {
                use            generic-host    ; Name of host template to use
                host_name      __hostname__
                alias          __alias__
                address        __address__
        }
"""
        service_template = """
        define service {
                use                     generic-service    ; Name of service template to use
                host_name                               __hostname__
                service_description             __description__
                check_command                   __command__
        }
"""

        # write a single host
        host_template = write_host_template(host_template, hostname, ip_address)
        nagios_service += host_template

        # all hosts should be running SSH
        nagios_service += write_service_template(service_template, hostname, 'SSH', 'check_ssh')

        namespace = {'hostname': hostname, 'nagios_config':nagios_service}
        t = Template(open('hooks/templates/nagios.tmpl').read(), searchList=[namespace])
        config_file = host_config_path_template % (relation_id, hostname)
        f = open(config_file, 'w')
        f.write(str(t))
        f.close()

        refresh_hostgroups(relation_name)

        print "Restarting nagios"
        subprocess.call(["service", "nagios3", "restart"])
        return 0

if __name__ == '__main__':
        sys.exit(main())


